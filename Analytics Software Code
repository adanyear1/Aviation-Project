#include <iostream>
#include <string>
#include <iomanip>
#include <cmath>

using namespace std;

//GLOBAL VARIABLES FOR NUMBER OF GATES
const int RegionalGates = 5,
          DomesticShortGates = 10,
          DomesticLongGates = 10,
          InternationalGates = 5;

const int totalgates = 30;
//GLOBAL VARIABLES FOR DOMESTIC & INTERNATIONAL FLIGHTS PER GATE
const int Gate_Regional = 12,
          Gate_DomesticShort = 10,
          Gate_DomesticLong = 10,
          Gate_International = 7;
const int totalflights = 39;

//GLOBAL VARIABLES FOR GATE PREDICTED GROWTH
const int Growth_Regional = 0.04,
          Growth_DomesticShort = 0.05,
          Growth_DomesticLong = 0.06,
          Growth_International = 0.10;

//GLOBAL VARIABLES FOR AVERAGE NUMBER OF SEATS ON FLIGHT
const int Seats_Regional = 100,
          Seats_DomesticShort = 166,
          Seats_DomesticLong = 150,
          Seats_International = 230;

//GLOBAL VARIABLES FOR NUMBER OF DAYS & YEARS
const int years = 10,
          months= 12,
          days = 356;
const int t = 1;

int y;



struct Calculations
{
    double timespan[t];
    double total[days];
};

struct flightinformation
{
    double dailyregional;
    double dailydomesticshort;
    double dailydomesticlong;
    double dailyinternational;
};
struct flightdata
{
    Calculations airplane;
    flightinformation passengers;
};

//FUNCTION PROTOTYPES
void Daily(struct flightdata Annual[], int);
void Yearly(struct flightdata Annual[], int);
void Monthly(struct flightdata Annual[], int);
void PassengerData(struct flightdata Annual[], int);
void Report(struct flightdata Annual[], int);

int main()
{
    cout << "MG Aircraft Data Calculator " << endl
         << " " << endl
         << "For How Many Years Would You Like To Forecast Gate Traffic Trends?" << endl;
    cin >> y;

    flightdata Annual[y];

        while (y > 10 || y < 0)//validating input data
    {
        cout << "Invaild Number Of Years." << endl;
        cout << "Enter Number Of Years In-Between 1 - 10 " << endl;
        cin >> y;
    }

    for(int airport = 0; airport < 1; airport++)
    {
        Daily(Annual, airport);
        Yearly(Annual, airport);
        Monthly(Annual, airport);
        PassengerData(Annual, airport);
        Report(Annual, airport);
    }

    return 0;
}

void Daily(struct flightdata Annual[], int airport)
{
    Annual[airport].airplane.total[1] = (totalgates)*(totalflights);
}

void Monthly(struct flightdata Annual[], int airport)
{
    Annual[airport].airplane.total[30] = Annual[airport].airplane.total[1] * 30;
}

void Yearly(struct flightdata Annual[], int airport)
{
    Annual[airport].airplane.total[356] = Annual[airport].airplane.total[1]*days;
    Annual[airport].airplane.timespan[1] = Annual[airport].airplane.total[356] * y;
}

void PassengerData(struct flightdata Annual[], int airport)
{
    Annual[airport].passengers.dailyregional = RegionalGates*Gate_Regional*Seats_Regional;
    Annual[airport].passengers.dailydomesticshort = DomesticShortGates*Gate_DomesticShort*Seats_DomesticShort;
    Annual[airport].passengers.dailydomesticlong = DomesticLongGates*Gate_DomesticLong*Seats_DomesticLong;
    Annual[airport].passengers.dailyinternational = InternationalGates*Gate_International*Seats_International;
}

void Report(struct flightdata Annual[], int airport)
{
    cout << "The Total Number of Flights for " << y << " years" << endl
         << Annual[airport].airplane.timespan[1] << endl
         << "Total Number of Flights Daily " << endl
         << Annual[airport].airplane.total[1] << endl
         << "Total Number of Fights Monthly" << endl
         << Annual[airport].airplane.total[30] << endl
         << "Total Number of Flights Yearly" << endl
         << Annual[airport].airplane.total[1]*days << endl;

    cout << "Categorized Flight Information" << endl
         << Annual[airport].passengers.dailyregional << " Daily Regional Passengers" << endl
         << Annual[airport].passengers.dailydomesticshort << " Daily Domestic Short Route Passengers" << endl
         << Annual[airport].passengers.dailydomesticlong << " Daily Domestic Long Route Passengers" << endl
         << Annual[airport].passengers.dailyinternational << " Daily International Passengers" << endl;
}
